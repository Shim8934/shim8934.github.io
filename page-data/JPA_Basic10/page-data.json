{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/JPA_Basic10/",
    "result": {"data":{"cur":{"id":"b0bac9d2-c3df-5133-a995-c584d5208cdc","html":"<h2 id=\"jpql\" style=\"position:relative;\"><a href=\"#jpql\" aria-label=\"jpql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPQL</h2>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#jpql\">JPQL</a></li>\n</ul>\n</div>","excerpt":"JPQL JPQL","frontmatter":{"date":"January 17, 2022","title":"JPA 기본 강의 정리 - 10. JPQL 정리_02","categories":"JPA_Basic","author":"shim8934","emoji":"😄"},"fields":{"slug":"/JPA_Basic10/"}},"next":{"id":"b8a69ecc-31e1-5893-b11a-46fc76719e13","html":"<h2 id=\"jpql\" style=\"position:relative;\"><a href=\"#jpql\" aria-label=\"jpql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPQL</h2>\n<h3 id=\"1-jpa에서-sql을-사용할-수-있는-방법\" style=\"position:relative;\"><a href=\"#1-jpa%EC%97%90%EC%84%9C-sql%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"1 jpa에서 sql을 사용할 수 있는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JPA에서 SQL을 사용할 수 있는 방법</h3>\n<table>\n<thead>\n<tr>\n<th>방법</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. <strong>JPQL</strong></td>\n<td>* 가장 단순한 조회 방법<br />* 엔티티 객체를 중심으로 개발<br />* 문제는 검색할 때이며, 테이블이 아닌 엔티티 객체를 대상으로 검색.</td>\n</tr>\n<tr>\n<td>2. Criteria</td>\n<td>* 자바 코드로 JPQL을 작성할 수 있다.<br />* JPA 공식 기능<br />* 단, 너무 복잡하고 실용성이 없다.</td>\n</tr>\n<tr>\n<td>3. <strong>QueryDSL</strong></td>\n<td>* 컴파일 시점에 문법 오류를 찾을 수 있다.<br />* 동적 쿼리 작성 편리하며, 단순하고 쉽다.<br />* <b>실무 사용 권장</b></td>\n</tr>\n<tr>\n<td>4. Native SQL</td>\n<td>* JPA가 제공하는 SQL을 직접 사용하는 기능.<br />* JPQL로 해결할 수 없는 특정 DB의 의존적인 기능 사용 가능<br />  ex) 오라클 Connect By, 특정 DB만 사용하는 SQL 힌트</td>\n</tr>\n<tr>\n<td>번외 - JDBC API, MyBatis, SpringJDBCTemplate</td>\n<td>* JPA를 사용하면서 기존의 JDBC, MyBatis, SpringJDBCTemplate 등을 함께 사용 가능하다.<br />* 단, 영속성 컨텍스트를 적절한 시점에 강제로 플러시해야한다.<br />  ex) JPA를 우회해서 SQL을 실행하기 직전에 영속성 컨텍스트 수동 플러시</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"2-jpql\" style=\"position:relative;\"><a href=\"#2-jpql\" aria-label=\"2 jpql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JPQL</h3>\n<ul>\n<li>객체 지향 쿼리 언어. 단, 테이블을 대상으로 쿼리하는 것이 아닌 <strong>엔티티 객체를 대상으로 쿼리</strong>한다.</li>\n</ul>\n<h4 id=\"1-기본-사용-예시\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"1 기본 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 기본 사용 예시</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Main.java</span>\r\n<span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nmember<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nmember<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nem<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> query <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m from Member m\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>별칭 필수 (위의 Member m). as는 생략 가능.</li>\n<li>테이블 이름이 아닌 <strong>엔티티 이름을 사용</strong>한다. - 위의 Member는 테이블 Member가 아닌 Class Member(즉, 엔티티)를 호출하는 것이다.</li>\n<li>엔티티와 속성은 대소문자 구분 O (Member, age 등등)  /  JPQL 키워드는 대소문자 구분 X (SELECT, FROM, where)</li>\n</ol>\n<hr>\n<h4 id=\"2-반환-타입과-파라미터-바인딩\" style=\"position:relative;\"><a href=\"#2-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EA%B3%BC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"2 반환 타입과 파라미터 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 반환 타입과 파라미터 바인딩</h4>\n<h5 id=\"1-typedquery속성\" style=\"position:relative;\"><a href=\"#1-typedquery%EC%86%8D%EC%84%B1\" aria-label=\"1 typedquery속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) TypedQuery&#x3C;속성></h5>\n<ul>\n<li>반환 타입이 명확할 때 사용. ex) String인 경우 - TypedQuery<String> member…</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반환 타입이 Member 객체로 명확한 경우 - 01</span>\r\n<span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> query <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m from Member m\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> resultList <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">:</span> resultList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>member1<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 반환 타입이 String으로 명확한 경우 - 02</span>\r\n<span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> singlequery <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m.username from Member m where m.username = 'kim'\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">String</span> singleResult <span class=\"token operator\">=</span> singlequery<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleResult = \"</span> <span class=\"token operator\">+</span> singleResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<hr>\n<h5 id=\"2-query\" style=\"position:relative;\"><a href=\"#2-query\" aria-label=\"2 query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) Query</h5>\n<ul>\n<li>반환 타입이 불명확할 때 사용.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반환 타입이 여러 기본 타입으로 불명확한 경우 - String(username)과 int(age)가 같이 반환되는 경우.</span>\r\n<span class=\"token class-name\">Query</span> query3 <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m.username, m.age from Member m\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h5 id=\"3-결과-조회-api\" style=\"position:relative;\"><a href=\"#3-%EA%B2%B0%EA%B3%BC-%EC%A1%B0%ED%9A%8C-api\" aria-label=\"3 결과 조회 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 결과 조회 API</h5>\n<ol>\n<li>\n<p>getResultList() - 결과가 하나 이상일 때, 리스트 반환  /  없으면 빈 리스트 반환.</p>\n</li>\n<li>\n<p>getSingleResult() - 결과가 <strong>정확히 하나</strong> or <strong>단일 객체</strong></p>\n<ul>\n<li>없으면 NoResultException 발생  /  둘 이상인 경우 NonUniqueResultException 발생</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Spring Data JPA에서 별도의 방법으로 Exception 안 발생하게 하는 방법이 있다. ( 추후 공부 )</li>\n</ul>\n<hr>\n<h5 id=\"4-파라미터-바인딩\" style=\"position:relative;\"><a href=\"#4-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"4 파라미터 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) 파라미터 바인딩</h5>\n<ol>\n<li>이름 기준 ( :변수 사용)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> singlequery <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m.username from Member m where m.username = :username\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nsinglequery<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nsinglequery<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>위치 기준 ( ?숫자 사용)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 위치 기준이라는 것을 명확하게 하고자, where절의 변수 위치 표기를 바꿈</span>\r\n<span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> singlequery2 <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m.username from Member m where m.username = ?2 and m.age = ?1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nsinglequery2<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nsinglequery2<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"member%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nsinglequery2<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>실무 추천 - 위치 기준은 되도록 쓰지 않도록..!</strong></li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#jpql\">JPQL</a></p>\n<ul>\n<li>\n<p><a href=\"#1-jpa%EC%97%90%EC%84%9C-sql%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95\">1. JPA에서 SQL을 사용할 수 있는 방법</a></p>\n</li>\n<li>\n<p><a href=\"#2-jpql\">2. JPQL</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">1) 기본 사용 예시</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EA%B3%BC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">2) 반환 타입과 파라미터 바인딩</a></p>\n<ul>\n<li><a href=\"#1-typedquery%EC%86%8D%EC%84%B1\">(1) TypedQuery&#x3C;속성></a></li>\n<li><a href=\"#2-query\">(2) Query</a></li>\n<li><a href=\"#3-%EA%B2%B0%EA%B3%BC-%EC%A1%B0%ED%9A%8C-api\">(3) 결과 조회 API</a></li>\n<li><a href=\"#4-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">(4) 파라미터 바인딩</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 16, 2022","title":"JPA 기본 강의 정리 - 09. JPQL 정리_01","categories":"JPA_Basic","author":"shim8934","emoji":"😄"},"fields":{"slug":"/JPA_Basic09/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://shim8934.github.io","comments":{"utterances":{"repo":"Shim8934/shim8934.github.io"}}}}},"pageContext":{"slug":"/JPA_Basic10/","nextSlug":"/JPA_Basic09/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}