{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/JPA_Basic",
    "result": {"pageContext":{"currentCategory":"JPA_Basic","categories":["All","JPA_Basic","EKS"],"edges":[{"node":{"id":"2bd3a78c-84e5-5683-9054-241312c8105f","excerpt":"엔티티 매핑 - 기본 객체와 테이블 매핑 : @Entity, @Table 필드와 컬럼 매핑 : @Column 기본 키 매핑 : @Id 연관관계 매핑 : @ManyToOne, @JoinColumn 1. @Entity JPA를 사용해서 테이블과 매핑할 클래스에 사용 필수. !주의 2. @Table Entity와 매핑할 테이블 지정 시 사용. 3. Entity의 속성 (테이블 컬럼)  어노테이션 정리 어노테이션 설명 @Column 컬럼 매핑 @Temporal 날짜 타입 매핑 @Enumerated enum 타입 매핑 @Lob BLOB, CLOB 매핑 @Transient 특정 필드를 컬럼에 매핑하지 않음(매핑 무시) 1) @Column 속성 설명 기본값 name 필드와 매핑할 테이블의 컬럼 이름 객체의 필드 이름 insertable,updatable 등록, 변경 가능 여부 TRUE nullable(DDL) null 값의 허용 여부를 설정. false로 설정하면 DDL 생성 시에 not nu…","fields":{"slug":"/JPA_Basic02/"},"frontmatter":{"categories":"JPA_Basic","title":"JPA 기본 강의 정리 - 02. 엔티티 기본 매핑","date":"January 07, 2022"}},"next":{"fields":{"slug":"/JPA_Basic01/"}},"previous":null},{"node":{"id":"4ed7a110-65f4-5eb6-8091-fca4c16a8a5f","excerpt":"JPA ? JPA의 등장 배경 → Java와  DB(RDBMS) 의 정보 저장 방식의 차이 (1) Java - Java에서 객체는 참조를 사용해 연관 데이터 조회\r\n(2) RDBMS - 테이블에 외래 키를 사용.  즉, 기존의 JDBC Template, Mybatis 등의 기술이 있었음에도 객체 지향적인 프로그래밍이 아닌 SQL 중심적인 개발이 많은 시간과 노력을 들이게 됐다. 앞서 나온 기술들의 SQL 중심적인 개발 요소를 줄이고자 Java Persistence API(이하 JPA) 가 등장하게 됐다. JPA의 특징 1. 영속성 컨텍스트 엔티티를 영구 저장하는 환경 (컨테이너) 1차 캐시 동일성 보장 트랜잭션을 지원하는 쓰기 지연 변경 감지 지연 로딩 1) 1차 캐시 em.persist() 로 객체가 1차 캐시에 저장되지만, DB에 저장된 것은 아니다. → 이후 트랜잭션을 커밋해야 실제로 DB에 객체 관련 쿼리가 입력되고, 그 때 저장된다. 즉, 저장되기 전까진 객체의 상태와 관…","fields":{"slug":"/JPA_Basic01/"},"frontmatter":{"categories":"JPA_Basic","title":"JPA 기본 강의 정리 - 01. JPA 사용 이유 & 영속성","date":"January 06, 2022"}},"next":{"fields":{"slug":"/AWS_EKS03/"}},"previous":{"fields":{"slug":"/JPA_Basic02/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}